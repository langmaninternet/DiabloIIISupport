using System;
using System.Collections.Generic;
using System.Linq;

namespace Turbo.Plugins.Default
{
    public class ElitePlugin : BasePlugin, IInGameWorldPainter
    {
        /************************************************************************/
        /* MonsterCirclePlugin                                                  */
        /* https://github.com/coreyblackgh/HUD-Plugins                          */
        /* and                                                                  */
        /* DiadrasFirstGemPlugin                                                */
        /* https://github.com/User5981/Resu                                     */
        /************************************************************************/
        public Dictionary<MonsterAffix, WorldDecoratorCollection> AffixDecorators { get; set; }
        public Dictionary<MonsterAffix, string> CustomAffixNames { get; set; }
        public WorldDecoratorCollection RareDecorator { get; set; }
        public WorldDecoratorCollection ChampionDecorator { get; set; }
        public WorldDecoratorCollection JuggernautDecorator { get; set; }
        public WorldDecoratorCollection GoblinDecorator { get; set; } // Goblin
        public WorldDecoratorCollection UniqueDecorator { get; set; }   //Purple
        public WorldDecoratorCollection BossDecorator { get; set; }   //Boss
        public WorldDecoratorCollection LowHeathBossDirectionLineDecorator { get; set; }
        public TopLabelDecorator EliteHealthDecorator { get; set; }
        public int EliteHealthBlockSize { get; set; };
        public int StrickenPropSquare { get; set; }
        public bool StrickenInCooldown { get; set; }
        public int StrickenMonsterCount { get; set; }
        public TopLabelDecorator StrickenStackDecorator { get; set; }
        public Dictionary<uint, Tuple<double, int>> StrickenMonsterStatus { get; set; }  // AcdId, Health, Stacks
        public void LoadEliteCirclePlugin()
        {
            EliteHealthDecorator = new TopLabelDecorator(Hud)
            {
                TextFont = Hud.Render.CreateFont("tahoma", 10, 255, 224, 17, 95, true, false, false),
            };
            EliteHealthBlockSize = (int)(Hud.Window.Size.Width / 50);

            var shadowBrush = Hud.Render.CreateBrush(96, 0, 0, 0, 1);

            GoblinDecorator = new WorldDecoratorCollection(
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 57, 194, 29, 3),
                    Radius = 3
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 240, 213, 10, 5),
                    Radius = 2
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(180, 255, 0, 0, 6),
                    Radius = 0.3f
                }
            );

            RareDecorator = new WorldDecoratorCollection(
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 148, 20, 3),
                    Radius = 3
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 148, 20, 5),
                    Radius = 2
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(180, 255, 0, 0, 6),
                    Radius = 0.3f
                },
                new MapShapeDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 148, 20, 0),
                    Radius = 6,
                    ShapePainter = new CircleShapePainter(Hud)
                }
            );
            ChampionDecorator = new WorldDecoratorCollection(
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 64, 128, 255, 3),
                    Radius = 3
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 64, 128, 255, 5),
                    Radius = 2
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(180, 255, 0, 0, 6),
                    Radius = 0.3f
                },
                new MapShapeDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 64, 128, 255, 0),
                    Radius = 6,
                    ShapePainter = new CircleShapePainter(Hud)
                }
            );
            JuggernautDecorator = new WorldDecoratorCollection(
                new MapShapeDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 50, 0, 0),
                    ShadowBrush = shadowBrush,
                    Radius = 6,
                    ShapePainter = new CircleShapePainter(Hud),
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 50, 0, 3),
                    Radius = 3,
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 148, 20, 5),
                    Radius = 2
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(180, 255, 0, 0, 6),
                    Radius = 0.3f
                }
                );
            UniqueDecorator = new WorldDecoratorCollection(
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 140, 255, 3),
                    Radius = 3
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 140, 255, 5),
                    Radius = 2
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(180, 255, 0, 0, 6),
                    Radius = 0.3f
                },
                new MapShapeDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 140, 255, 0),
                    Radius = 6,
                    ShapePainter = new CircleShapePainter(Hud)
                }
            );

            BossDecorator = new WorldDecoratorCollection(
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 96, 0, 4),
                    Radius = 4
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 96, 0, 5),
                    Radius = 2
                },
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(180, 255, 0, 0, 6),
                    Radius = 0.3f
                },
                new MapShapeDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 255, 96, 0, 0),
                    Radius = 6,
                    ShapePainter = new CircleShapePainter(Hud)
                }
            );

            CustomAffixNames = new Dictionary<MonsterAffix, string>();

            AffixDecorators = new Dictionary<MonsterAffix, WorldDecoratorCollection>();




            StrickenMonsterStatus = new Dictionary<uint, Tuple<double, int>>();
            StrickenPropSquare = (int)(Hud.Window.Size.Width / 53.333);
            StrickenInCooldown = false;
            StrickenMonsterCount = 0;

            StrickenStackDecorator = new TopLabelDecorator(Hud)
            {
                TextFont = Hud.Render.CreateFont("tahoma", 7, 255, 0, 0, 0, true, false, 250, 255, 255, 255, true),
            };

            LowHeathBossDirectionLineDecorator = new WorldDecoratorCollection(
                new MapShapeDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(192, 255, 255, 55, -1),
                    ShadowBrush = Hud.Render.CreateBrush(96, 0, 0, 0, 1),
                    Radius = 10.0f,
                    ShapePainter = new LineFromMeShapePainter(Hud),
                },
                new MapLabelDecorator(Hud)
                {
                    LabelFont = Hud.Render.CreateFont("tahoma", 6f, 200, 255, 255, 0, false, false, 128, 0, 0, 0, true),
                    RadiusOffset = 10,
                    Up = true,
                }
          );

        }
        public void OnNewAreaEliteCirclePlugin(bool newGame, ISnoArea area)
        {
            if (newGame)
            {
                StrickenMonsterStatus.Clear();
            }
        }
        public void DrawEliteCirclePlugin(WorldLayer layer)
        {
            var alivemonsters = Hud.Game.AliveMonsters;
            var goblins = Hud.Game.AliveMonsters.Where(x => x.SnoMonster.Priority == MonsterPriority.goblin);
            foreach (var monster in goblins)
            {
                GoblinDecorator.Paint(layer, monster, monster.FloorCoordinate, null);
            }
            List<IMonster> monstersElite = new List<IMonster>();
            foreach (var monster in alivemonsters)
            {
                if (monster.Rarity == ActorRarity.Champion || monster.Rarity == ActorRarity.Rare)
                {
                    monstersElite.Add(monster);
                }
                if (monster.Rarity == ActorRarity.Unique)
                {
                    UniqueDecorator.Paint(layer, monster, monster.FloorCoordinate, monster.SnoMonster.NameLocalized);
                }

                if (monster.Rarity == ActorRarity.Boss)
                {
                    BossDecorator.Paint(layer, monster, monster.FloorCoordinate, monster.SnoMonster.NameLocalized);
                }
            }
            foreach (var monster in monstersElite)
            {
                if (monster.SummonerAcdDynamicId == 0)
                {
                    var currentMonsterHealthPercent = monster.CurHealth * 100.0 / monster.MaxHealth;

                    bool flagIsNotJuggernaut = true;
                    foreach (var snoMonsterAffix in monster.AffixSnoList)
                    {
                        string affixName = null;
                        if (CustomAffixNames.ContainsKey(snoMonsterAffix.Affix))
                        {
                            affixName = CustomAffixNames[snoMonsterAffix.Affix];
                        }
                        else affixName = snoMonsterAffix.NameLocalized;
                        if (snoMonsterAffix.Affix == MonsterAffix.Juggernaut) flagIsNotJuggernaut = false;

                        WorldDecoratorCollection decorator;
                        if (!AffixDecorators.TryGetValue(snoMonsterAffix.Affix, out decorator)) continue;
                        decorator.Paint(layer, monster, monster.FloorCoordinate, affixName);
                    }
                    if (monster.Rarity == ActorRarity.Rare)
                    {
                        if (flagIsNotJuggernaut) RareDecorator.Paint(layer, monster, monster.FloorCoordinate, monster.SnoMonster.NameLocalized);
                        else JuggernautDecorator.Paint(layer, monster, monster.FloorCoordinate, monster.SnoMonster.NameLocalized);
                    }
                    if (monster.Rarity == ActorRarity.Champion) ChampionDecorator.Paint(layer, monster, monster.FloorCoordinate, monster.SnoMonster.NameLocalized);
                    if (currentMonsterHealthPercent < 40.0)
                    {
                        var monsterScreenCoordinate = monster.FloorCoordinate.ToScreenCoordinate();
                        string monsterHealthPercentStr = "HP:" + currentMonsterHealthPercent.ToString("0.0") + "%";
                        EliteHealthDecorator.TextFunc = () => monsterHealthPercentStr;
                        EliteHealthDecorator.Paint(monsterScreenCoordinate.X, monsterScreenCoordinate.Y - EliteHealthBlockSize, EliteHealthBlockSize, EliteHealthBlockSize, HorizontalAlign.Center);
                    }
                    if (currentMonsterHealthPercent < 20.0)
                    {
                        LowHeathBossDirectionLineDecorator.Paint(layer, null, monster.FloorCoordinate, null);
                    }
                }
            }

            bool StrickenActive = false;
            foreach (var StrickenLocation in Hud.Game.Items.Where(x => x.Location == ItemLocation.LeftRing || x.Location == ItemLocation.RightRing || x.Location == ItemLocation.Neck))
            {
                if (StrickenLocation.SocketCount != 1 || StrickenLocation.ItemsInSocket == null) continue;
                var Stricken = StrickenLocation.ItemsInSocket.FirstOrDefault();
                if (Stricken == null) continue;
                if (Stricken.SnoItem.Sno == 3249948847) { StrickenActive = true; break; } else { continue; }
            }
            if (StrickenActive)
            {
                var Texture = Hud.Texture.GetItemTexture(Hud.Sno.SnoItems.Unique_Gem_018_x1);
                foreach (var monster in monstersElite)
                {
                    if (monster.IsAlive)
                    {
                        var monsterScreenCoordinate = monster.FloorCoordinate.ToScreenCoordinate();
                        Tuple<double, int> valuesOut;
                        if (StrickenMonsterStatus.TryGetValue(monster.AcdId, out valuesOut))
                        {
                            double monHealth = monster.CurHealth;
                            double prevHealth = valuesOut.Item1;
                            int prevStacks = valuesOut.Item2;

                            if (prevHealth > monHealth && Hud.Game.Me.Powers.BuffIsActive(Hud.Sno.SnoPowers.BaneOfTheStrickenPrimary.Sno, 2) && StrickenMonsterCount == 0 && !StrickenInCooldown)
                            {
                                int Stacks = (int)(prevStacks + 1);
                                Tuple<double, int> updateValues = new Tuple<double, int>(monster.CurHealth, Stacks);
                                StrickenMonsterStatus[monster.AcdId] = updateValues;
                                StrickenMonsterCount++;
                                StrickenInCooldown = true;
                            }

                            else if (!Hud.Game.Me.Powers.BuffIsActive(Hud.Sno.SnoPowers.BaneOfTheStrickenPrimary.Sno, 2) && StrickenInCooldown)
                            {
                                StrickenInCooldown = false;
                                StrickenMonsterCount = 0;
                                if (prevHealth > monHealth)
                                {
                                    int Stacks = (int)(prevStacks);
                                    Tuple<double, int> updateValues = new Tuple<double, int>(monster.CurHealth, Stacks);
                                    StrickenMonsterStatus[monster.AcdId] = updateValues;
                                }
                            }
                            if (prevStacks > 0)
                            {
                                Texture.Draw(monsterScreenCoordinate.X, monsterScreenCoordinate.Y, StrickenPropSquare, StrickenPropSquare);
                                StrickenStackDecorator.TextFunc = () => prevStacks.ToString();
                                StrickenStackDecorator.Paint(monsterScreenCoordinate.X, monsterScreenCoordinate.Y, StrickenPropSquare, StrickenPropSquare, HorizontalAlign.Center);
                            }
                        }
                        else
                        {
                            Tuple<double, int> valuesIn = new Tuple<double, int>(monster.CurHealth, (int)(0));
                            StrickenMonsterStatus.Add(monster.AcdId, valuesIn);
                        }
                    }
                    else
                    {
                        StrickenMonsterStatus.Remove(monster.AcdId);
                    }
                }
            }





            monstersElite.Clear();
        }















        /************************************************************************/
        /* EliteBarPlugin                                                       */
        /* https://github.com/d3gigi/plugins                                    */
        /************************************************************************/
        public WorldDecoratorCollection HitBoxDecorator { get; set; }
        public IFont LightFont { get; set; }
        public IFont RedFont { get; set; }
        public IFont NameFont { get; set; }
        public IBrush BackgroundBrush { get; set; }
        public IBrush BorderBrush { get; set; }
        public IBrush RareBrush { get; set; }
        public IBrush RareJuggerBrush { get; set; }
        public IBrush RareMinionBrush { get; set; }
        public IBrush ChampionBrush { get; set; }
        public IBrush BossBrush { get; set; }
        public bool JuggernautHighlight { get; set; }
        public bool MissingHighlight { get; set; }
        public bool ShowRareMinions { get; set; }
        public bool ShowDebuffAndCC { get; set; }
        public bool ShowBossHitBox { get; set; }
        public bool ShowMonsterType { get; set; }
        public bool CircleNonIllusion { get; set; }
        public float XPos { get; set; }
        public float YPos { get; set; }
        public float XScaling { get; set; }
        public float YScaling { get; set; }
        public string PercentageDescriptor { get; set; }
        public Dictionary<MonsterAffix, string> DisplayAffix;
        private float px, py, h, w2;
        public void LoadEliteBarPlugin()
        {
            //Configuration
            MissingHighlight = true;
            JuggernautHighlight = true;
            CircleNonIllusion = true;
            ShowRareMinions = false;
            ShowDebuffAndCC = true;
            ShowBossHitBox = true;
            ShowMonsterType = true;
            XScaling = 1.0f;
            YScaling = 1.0f;
            PercentageDescriptor = "0.00";
            XPos = Hud.Window.Size.Width * 0.125f;
            YPos = Hud.Window.Size.Height * 0.0333f;
            DisplayAffix = new Dictionary<MonsterAffix, string>();

            //Colorization
            LightFont = Hud.Render.CreateFont("tahoma", 6f, 160, 255, 255, 255, false, false, true);
            RedFont = Hud.Render.CreateFont("tahoma", 6f, 200, 255, 0, 0, false, false, true);
            NameFont = Hud.Render.CreateFont("tahoma", 6f, 200, 255, 255, 255, false, false, true);
            BackgroundBrush = Hud.Render.CreateBrush(255, 125, 120, 120, 0);
            BorderBrush = Hud.Render.CreateBrush(255, 255, 255, 255, 1);
            RareBrush = Hud.Render.CreateBrush(255, 255, 128, 0, 0);
            RareJuggerBrush = Hud.Render.CreateBrush(255, 225, 100, 50, 0);
            RareMinionBrush = Hud.Render.CreateBrush(220, 200, 100, 0, 0);
            ChampionBrush = Hud.Render.CreateBrush(255, 0, 128, 255, 0);
            BossBrush = Hud.Render.CreateBrush(255, 200, 20, 0, 0);

            //HitBoxDecorator for Bosses and NonClone-Illusionist
            HitBoxDecorator = new WorldDecoratorCollection(
                new GroundCircleDecorator(Hud)
                {
                    Brush = Hud.Render.CreateBrush(255, 57, 194, 29, 3),
                    Radius = -1
                }
            );
        }
        private void DrawHealthBar(WorldLayer layer, IMonster m, ref float yref)
        {
            if (m.Rarity == ActorRarity.RareMinion && !ShowRareMinions) return;     //no minions
            if (m.SummonerAcdDynamicId != 0) return;                                //no clones


            var w = m.CurHealth * w2 / m.MaxHealth;
            var per = LightFont.GetTextLayout((m.CurHealth * 100 / m.MaxHealth).ToString(PercentageDescriptor) + "%");
            var y = YPos + py * 8 * yref;
            IBrush cBrush = null;
            IFont cFont = null;

            //Brush selection
            switch (m.Rarity)
            {
                case ActorRarity.Boss:
                    cBrush = BossBrush;
                    break;
                case ActorRarity.Champion:
                    cBrush = ChampionBrush;
                    break;
                case ActorRarity.Rare:
                    cBrush = RareBrush;
                    break;
                case ActorRarity.RareMinion:
                    cBrush = RareMinionBrush;
                    break;
                default:
                    cBrush = BackgroundBrush;
                    break;
            }

            //Jugger Highlight
            if (JuggernautHighlight && m.Rarity == ActorRarity.Rare && HasAffix(m, MonsterAffix.Juggernaut))
            {
                cFont = RedFont;
                cBrush = RareJuggerBrush;
            }
            else
                cFont = NameFont;

            //Missing Highlight
            if (MissingHighlight && (m.Rarity == ActorRarity.Champion || m.Rarity == ActorRarity.Rare) && !m.IsOnScreen)
            {
                var missing = RedFont.GetTextLayout("\u26A0");
                RedFont.DrawText(missing, XPos - 17, y - py);
            }

            //Circle Non-Clones and Boss
            if (CircleNonIllusion && m.SummonerAcdDynamicId == 0 && HasAffix(m, MonsterAffix.Illusionist) || m.Rarity == ActorRarity.Boss && ShowBossHitBox)
                HitBoxDecorator.Paint(layer, m, m.FloorCoordinate, string.Empty);

            //Show Debuffs on Monster
            if (ShowDebuffAndCC)
            {
                string textDebuff = null;
                if (m.Locust) textDebuff += (textDebuff == null ? "" : ", ") + "Locust";
                if (m.Palmed) textDebuff += (textDebuff == null ? "" : ", ") + "Palm";
                if (m.Haunted) textDebuff += (textDebuff == null ? "" : ", ") + "Haunt";
                if (m.MarkedForDeath) textDebuff += (textDebuff == null ? "" : ", ") + "Mark";
                if (m.Strongarmed) textDebuff += (textDebuff == null ? "" : ", ") + "Strongarm";
                string textCC = null;
                if (m.Frozen) textCC += (textCC == null ? "" : ", ") + "Frozen";
                if (m.Chilled) textCC += (textCC == null ? "" : ", ") + "Chill";
                if (m.Slow) textCC += (textCC == null ? "" : ", ") + "Slow";
                if (m.Stunned) textCC += (textCC == null ? "" : ", ") + "Stun";
                if (m.Invulnerable) textCC += (textCC == null ? "" : ", ") + "Invulnerable";
                if (m.Blind) textCC += (textCC == null ? "" : ", ") + "Blind";
                var d = LightFont.GetTextLayout(textDebuff + (textDebuff != null && textCC != null ? " | " : "") + textCC);
                LightFont.DrawText(d, XPos + 65 + w2, y - py);
            }

            //Draw Rectangles
            BackgroundBrush.DrawRectangle(XPos, y, w2, h);
            BorderBrush.DrawRectangle(XPos, y, w2, h);
            cBrush.DrawRectangle(XPos, y, (float)w, h);
            LightFont.DrawText(per, XPos + 8 + w2, y - py);

            //Draw MonsterType
            if (ShowMonsterType)
            {
                var name = cFont.GetTextLayout(m.SnoMonster.NameLocalized);
                cFont.DrawText(name, XPos + 3, y - py);
            }

            //increase linecount
            yref += 1.0f;
        }
        private void DrawPack(WorldLayer layer, IMonsterPack p, ref float yref)
        {
            //Check if any affixes are wished to be displayed
            if (DisplayAffix.Any())
            {
                string dAffix = "";
                foreach (ISnoMonsterAffix afx in p.AffixSnoList)
                {        //iterate affix list
                    if (DisplayAffix.Keys.Contains(afx.Affix))          //if affix is an key
                        dAffix += DisplayAffix[afx.Affix] + " ";        //add to output
                }
                if (!string.IsNullOrEmpty(dAffix))
                {
                    var d = LightFont.GetTextLayout(dAffix);
                    var y = YPos + py * 8 * yref;
                    LightFont.DrawText(d, XPos, y - py);
                    yref += 1.0f;
                }
            }
            //iterate all alive monsters of pack and print healthbars
            foreach (IMonster m in p.MonstersAlive)
            {
                DrawHealthBar(layer, m, ref yref);
            }
        }
        private bool HasAffix(IMonster m, MonsterAffix afx)
        {
            return m.AffixSnoList.Any(a => a.Affix == afx);
        }
        public void DrawEliteBarPlugin(WorldLayer layer)
        {
            //Spacing
            px = Hud.Window.Size.Width * 0.00155f * XScaling;
            py = Hud.Window.Size.Height * 0.001667f * YScaling;
            h = py * 6;
            w2 = px * 60;

            var packs = Hud.Game.MonsterPacks.Where(x => x.MonstersAlive.Any());
            var bosses = Hud.Game.AliveMonsters.Where(m => m.Rarity == ActorRarity.Boss);

            float yref = 0f;
            foreach (IMonster m in bosses)
                DrawHealthBar(layer, m, ref yref);
            yref += 0.5f;                                           //spacing between RG and Elites
            foreach (IMonsterPack p in packs)
            {
                DrawPack(layer, p, ref yref);
                yref += 0.5f;                                       //spacing between Elites
            }
        }


        /************************************************************************/
        /*                                                                      */
        /************************************************************************/
        public ElitePlugin()
        {
            Enabled = true;
        }
        public override void Load(IController hud)
        {
            base.Load(hud);
            LoadEliteCirclePlugin();
            LoadEliteBarPlugin();
        }
        public void OnNewArea(bool newGame, ISnoArea area)
        {
            OnNewAreaEliteCirclePlugin(newGame, area);
        }
        public void PaintWorld(WorldLayer layer)
        {
            DrawEliteCirclePlugin(layer);
            DrawEliteBarPlugin(layer);
        }
    }
}